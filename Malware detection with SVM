{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":33972,"sourceType":"datasetVersion","datasetId":25773}],"dockerImageVersionId":30028,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### Imports","metadata":{}},{"cell_type":"code","source":"# Imports\nimport numpy as np\nimport pandas as pd\nimport pickle\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nimport shap\nimport os\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('ggplot')\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-05T13:53:19.994277Z","iopub.execute_input":"2024-06-05T13:53:19.994794Z","iopub.status.idle":"2024-06-05T13:53:20.015623Z","shell.execute_reply.started":"2024-06-05T13:53:19.994730Z","shell.execute_reply":"2024-06-05T13:53:20.014499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/pe-files-malwares/dataset_malwares.csv')","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2024-06-05T13:53:20.018741Z","iopub.execute_input":"2024-06-05T13:53:20.019230Z","iopub.status.idle":"2024-06-05T13:53:20.181940Z","shell.execute_reply.started":"2024-06-05T13:53:20.019182Z","shell.execute_reply":"2024-06-05T13:53:20.180837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:20.183306Z","iopub.execute_input":"2024-06-05T13:53:20.183651Z","iopub.status.idle":"2024-06-05T13:53:20.206833Z","shell.execute_reply.started":"2024-06-05T13:53:20.183617Z","shell.execute_reply":"2024-06-05T13:53:20.205747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:20.208121Z","iopub.execute_input":"2024-06-05T13:53:20.208498Z","iopub.status.idle":"2024-06-05T13:53:20.234301Z","shell.execute_reply.started":"2024-06-05T13:53:20.208459Z","shell.execute_reply":"2024-06-05T13:53:20.233304Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"used_data = data.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware'], axis=1)\nlabels = data['Malware']","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:20.237163Z","iopub.execute_input":"2024-06-05T13:53:20.237480Z","iopub.status.idle":"2024-06-05T13:53:20.246656Z","shell.execute_reply.started":"2024-06-05T13:53:20.237447Z","shell.execute_reply":"2024-06-05T13:53:20.245580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Classes Distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nax = sns.countplot(data['Malware'])\nax.set_xticklabels(['Benign', 'Malware'])","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:20.248501Z","iopub.execute_input":"2024-06-05T13:53:20.248854Z","iopub.status.idle":"2024-06-05T13:53:20.391960Z","shell.execute_reply.started":"2024-06-05T13:53:20.248820Z","shell.execute_reply":"2024-06-05T13:53:20.391072Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Features visualization","metadata":{}},{"cell_type":"code","source":"features = ['MajorSubsystemVersion', 'MajorLinkerVersion', 'SizeOfCode', 'SizeOfImage', 'SizeOfHeaders', 'SizeOfInitializedData', \n            'SizeOfUninitializedData', 'SizeOfStackReserve', 'SizeOfHeapReserve', 'NumberOfSymbols', 'SectionMaxChar']\ni = 1\n\nfor feature in features:\n    plt.figure(figsize=(10, 15))\n    ax1 = plt.subplot(len(features), 2, i)\n    sns.distplot(data[data['Malware']==1][feature], ax=ax1, kde_kws={'bw': 0.1})\n    ax1.set_title(f'Malware', fontsize=10)\n    ax2 = plt.subplot(len(features), 2, i+1)\n    sns.distplot(data[data['Malware']==0][feature], ax=ax2, kde_kws={'bw': 0.1})\n    ax2.set_title(f'Benign', fontsize=10)\n    i = i + 2","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:20.393241Z","iopub.execute_input":"2024-06-05T13:53:20.393552Z","iopub.status.idle":"2024-06-05T13:53:25.399227Z","shell.execute_reply.started":"2024-06-05T13:53:20.393522Z","shell.execute_reply":"2024-06-05T13:53:25.397820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Splitting the data","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(used_data, data['Malware'], test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:25.400876Z","iopub.execute_input":"2024-06-05T13:53:25.401330Z","iopub.status.idle":"2024-06-05T13:53:25.424011Z","shell.execute_reply.started":"2024-06-05T13:53:25.401283Z","shell.execute_reply":"2024-06-05T13:53:25.422900Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Standarisasi fitur","metadata":{}},{"cell_type":"code","source":"#membangun model dan uji klasifikasi\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:25.425482Z","iopub.execute_input":"2024-06-05T13:53:25.425797Z","iopub.status.idle":"2024-06-05T13:53:25.465482Z","shell.execute_reply.started":"2024-06-05T13:53:25.425764Z","shell.execute_reply":"2024-06-05T13:53:25.464364Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Building the model","metadata":{}},{"cell_type":"code","source":"svm_model = SVC(kernel='linear')\nsvm_model.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:25.466746Z","iopub.execute_input":"2024-06-05T13:53:25.467073Z","iopub.status.idle":"2024-06-05T13:53:34.188178Z","shell.execute_reply.started":"2024-06-05T13:53:25.467040Z","shell.execute_reply":"2024-06-05T13:53:34.187258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Laporan klasifikasi","metadata":{}},{"cell_type":"code","source":"y_pred_svm = svm_model.predict(X_test)\nprint(\"SVM Classification Report:\")\nprint(classification_report(y_test, y_pred_svm))","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:34.189522Z","iopub.execute_input":"2024-06-05T13:53:34.189811Z","iopub.status.idle":"2024-06-05T13:53:34.802518Z","shell.execute_reply.started":"2024-06-05T13:53:34.189784Z","shell.execute_reply":"2024-06-05T13:53:34.801632Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Confusion matrix","metadata":{}},{"cell_type":"code","source":"conf_matrix_svm = confusion_matrix(y_test, y_pred_svm)\nsns.heatmap(conf_matrix_svm, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix - SVM')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:34.803856Z","iopub.execute_input":"2024-06-05T13:53:34.804139Z","iopub.status.idle":"2024-06-05T13:53:35.215470Z","shell.execute_reply.started":"2024-06-05T13:53:34.804112Z","shell.execute_reply":"2024-06-05T13:53:35.214279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Saving model","metadata":{}},{"cell_type":"code","source":"with open('svm_model.pkl', 'wb') as model_file:\n    pickle.dump(svm_model, model_file)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:35.217032Z","iopub.execute_input":"2024-06-05T13:53:35.217351Z","iopub.status.idle":"2024-06-05T13:53:35.224232Z","shell.execute_reply.started":"2024-06-05T13:53:35.217320Z","shell.execute_reply":"2024-06-05T13:53:35.222894Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Mean & Var Fitur","metadata":{}},{"cell_type":"code","source":"# Menghitung mean dan variance dari fitur untuk masing-masing kelas\ndata_benign = used_data[data['Malware'] == 0]\ndata_malware = used_data[data['Malware'] == 1]\n\nfeatures_mean_benign = data_benign.mean()\nfeatures_mean_malware = data_malware.mean()\nfeatures_var_benign = data_benign.var()\nfeatures_var_malware = data_malware.var()\n\n\n#print(\"Mean of features_mean_benign:\")\n#print(features_mean_benign)\n\n#print(\"Mean of features_mean_malware:\")\n#print(features_mean_malware)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:35.226077Z","iopub.execute_input":"2024-06-05T13:53:35.226457Z","iopub.status.idle":"2024-06-05T13:53:35.277079Z","shell.execute_reply.started":"2024-06-05T13:53:35.226419Z","shell.execute_reply":"2024-06-05T13:53:35.276213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Membuat DataFrame untuk mean dari fitur untuk setiap kelas\nmean_df = pd.DataFrame({\n    'Feature': used_data.columns,\n    'Benign': features_mean_benign.values,\n    'Malware': features_mean_malware.values\n})\n\n# Menggunakan seaborn untuk visualisasi yang lebih baik\nmean_melted = mean_df.melt(id_vars='Feature', var_name='Class', value_name='Mean')\n\n# Ukuran plot yang lebih besar\nplt.figure(figsize=(25, 50))\n\n# Membuat bar plot dengan seaborn\nsns.barplot(y='Feature', x='Mean', hue='Class', data=mean_melted, palette='mako')\n\n# Mengatur judul dan label\nplt.title('Mean of Features for Each Class', fontsize=20)\nplt.ylabel('Features', fontsize=16)\nplt.xlabel('Mean Value', fontsize=16)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend(title='Class', fontsize=14)\nplt.tight_layout()\n\n# Menampilkan plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:55:55.132717Z","iopub.execute_input":"2024-06-05T13:55:55.133311Z","iopub.status.idle":"2024-06-05T13:55:57.352382Z","shell.execute_reply.started":"2024-06-05T13:55:55.133261Z","shell.execute_reply":"2024-06-05T13:55:57.351269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Membuat DataFrame untuk varians dari fitur untuk setiap kelas\nvar_df = pd.DataFrame({\n    'Feature': used_data.columns,\n    'Benign': features_var_benign.values,\n    'Malware': features_var_malware.values\n})\n\n# Menggunakan seaborn untuk visualisasi yang lebih baik\nvar_melted = var_df.melt(id_vars='Feature', var_name='Class', value_name='Variance')\n\n# Ukuran plot yang lebih besar\nplt.figure(figsize=(30, 15))\n\n# Membuat bar plot dengan seaborn\nsns.barplot(x='Feature', y='Variance', hue='Class', data=var_melted, palette='viridis')\n\n# Mengatur judul dan label\nplt.title('Variance of Features for Each Class', fontsize=20)\nplt.xlabel('Features', fontsize=16)\nplt.ylabel('Variance Value', fontsize=16)\nplt.xticks(rotation=90, fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend(title='Class', fontsize=14)\nplt.tight_layout()\n\n# Menampilkan plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T13:53:37.166724Z","iopub.execute_input":"2024-06-05T13:53:37.167095Z","iopub.status.idle":"2024-06-05T13:53:39.225001Z","shell.execute_reply.started":"2024-06-05T13:53:37.167061Z","shell.execute_reply":"2024-06-05T13:53:39.223928Z"},"trusted":true},"execution_count":null,"outputs":[]}]}